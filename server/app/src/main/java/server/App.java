/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package server;

import java.util.*;
import java.net.*;
import java.io.*;

public class App {

    // a board used to help each client update the current chat
    private static class messageBoard {

        // the last message that and thread has written to the server
        private String lastMessage = "";

        public messageBoard() { lastMessage = ""; }

        // writes a new value for the message, synchronized so that one thread
        // can write at a time
        public synchronized void write(String message) {
            lastMessage = message;
        }

        // gets the message
        public String read() { return lastMessage; }
    }


    // handles making and breaking connections with the clients
    private static class Connection implements Runnable {

        private String lastMessageWriten = "";
        private final Socket clientSocket;
        private messageBoard log;

        // sets the socket and message board to internal variables
        public Connection(Socket socket, messageBoard board) {
            clientSocket = socket;
            log = board;
        }

        public void run() {

            // sets both streams to null before they are init
            PrintWriter outStream = null;
            BufferedReader inStream = null;

            // the message that the 
            String message = "";

            // a temp var to hold messages read from the board
            String temp = "";

            // the var that keeps the thread from running forever
            boolean loop = true;

            try {

                // creates both streams the client and server use to talk to each other
                inStream = new BufferedReader(
                        new InputStreamReader(clientSocket.getInputStream()));
                outStream = new PrintWriter(
                        clientSocket.getOutputStream(), true);


                // loops while loop is true
                while (loop) {

                    //first checks if their is a new message in the board
                    if ((temp = log.read()) != lastMessageWriten) {

                        // sets that as the new last written message
                        lastMessageWriten = temp;

                        // sends it back to the threads client
                        outStream.println(lastMessageWriten);
                    }

                    // if any data is present in the stream reads
                    if (inStream.ready()) {

                        // gets the new message from the client
                        message = inStream.readLine();

                        // if the message is not the magic number writes to the
                        // log
                        if (!"eRykMdxkNnBqI1cI8SH8X8SQNFCtxzDd".equals(message)) {
                            lastMessageWriten = message;
                            log.write(message);
                        }
                        else {
                            // otherwise ends the loop and terminates the thread
                            loop = false;
                        }
                    }
                }
            }
            catch(IOException e) {
                e.printStackTrace();
            }
            finally {
                try {
                    // trying to close both I/O streams
                    inStream.close();
                    clientSocket.close();
                }
                catch(IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    public static void main(String[] args) {

        // creates the message board for all clients to share
        messageBoard record = new messageBoard();

        // created the socket to get incoming connections 
        ServerSocket gateway = null;
        try {

            // sets up the socket with the needed parameters
            gateway = new ServerSocket(6666);
            gateway.setReuseAddress(true);

            // some text the terminal to help the user(s) understand what state
            // the system is in
            System.out.println("Starting Local-Chat Server...");
            System.out.println("Waiting for client connection(s)...");

            // loops forever accepting clients to the chatroom
            while(true) {

                // gets the new client that has connected
                Socket newClient = gateway.accept();

                // outputs the terminal some info about the client
                System.out.println("Client is connected " +
                        newClient.getInetAddress().getHostAddress());

                // adds client to another connection to manage
                Connection client = new Connection(newClient, record);

                // starts the new thread
                new Thread(client).start();
            }
        }
        catch(IOException e) {
            e.printStackTrace();
        }
        try {
            // trying to close the socket
            gateway.close();
        }
        catch(IOException e) {
            e.printStackTrace();
        }
    }
}

